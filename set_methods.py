'''
Пять наиболее популярных методов, используемых для работы с множествами
'''

import random

# создадим множество случайного размера, включающее в себя случайные числа
numeric_set = {random.randint(-100, 100) for i in range(random.randint(0, 100))}
print(numeric_set)    # выведем элементы исходного множества

# один из важных и популярных методов - определение длины множества (количества элементов) с помощью метода len(),
# который возвращает количество уникальных элементов множества
print('\n*** БЛОК 1. Метод len() ***')

print(numeric_set)    # выведем элементы исходного множества
print(len(numeric_set))    # выведем количество элементов множества

# важный и популярный оператор для проверки вхождения элемента в множество: in
# возвращает булевое значение True, если элемент входит в множество и False, если не входит
print('\n*** БЛОК 2. Оператор in ***')

numeric_check = 13    # зададим число для проверки вхождения в множество
print(numeric_set)    # выведем элементы исходного множества
print(f'Входит ли {numeric_check} в список множество: {numeric_check in numeric_set}')    # выведем результат

# метод .add() для внесения нового элемента в множество - один из востребованных методов работы с множествами
print('\n*** БЛОК 3. Метод .add() ***')

numeric_add = random.randint(0, 100)    # создадим случайное целое число

# если сгенерированное нами случайное число уже есть в списке, то поворяем генерацию числа до тех пор, пока не получим
# уникальное число, которое гарантированно можно добавить в множество
while numeric_add in numeric_set:
    numeric_add = random.randint(0, 100)

print(numeric_set)    # выведем элементы исходного множества
print(len(numeric_set))    # выведем количество элементов исходного множества

numeric_set.add(numeric_add)   # добавим новый УНИКАЛЬНЫЙ элемент в множество
print(numeric_set)    # выведем элементы нового множества
print(len(numeric_set))    # выведем количество элементов нового множества

# методы сравнения множеств также являются популярными, например, объедиинение множеств .union(), пересечение множеств
# .intersection(), вычитание множеств .difference() и другие
print('\n*** БЛОК 4. Метод .difference() ***')

# создадим еще одно множество из случайных чисел,  но с меньшиим количством элементов
numeric_differenсe = {random.randint(-100, 100) for i in range(random.randint(0, 10))}

print(numeric_set)    # выведем элементы исходного множества
print(len(numeric_set))    # выведем количество элементов множества

print(numeric_differenсe)    # выведем элементы нового множества
print(len(numeric_differenсe))    # выведем количество элементов множества

# важно помнить, что не все элементы нового множества совпадают с элементами исходного множества, поэтому разница между
# количеством элементов исходного множества и количеством элементов множества после вычитания не равно количеству элементов
# в новом множестве
print(numeric_set.difference(numeric_differenсe))    # выведем результат вычитания элементов нового множества из исходного
print(len(numeric_set.difference(numeric_differenсe)))    # выведем количество элементов множества

# метод удаления элемента из множества .discard() предпочтительнее аналога .remove(), так как если удаляемого элемента
# нет в множестве, то при использовании .remove() модуль упадет с ошибкой Key Error
print('\n*** БЛОК 5. Метод .discard() ***')

print(numeric_set)    # выведем элементы исходного множества
print(len(numeric_set))    # выведем количество элементов множества

numeric_set.discard(numeric_check)    # удалим число 13 из множества, если оно там есть

print(numeric_set)    # выведем элементы множества после удаления элемента
print(len(numeric_set))    # выведем количество элементов множества после удаления элемента
