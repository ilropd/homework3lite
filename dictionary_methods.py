'''
Пять наиболее популярных методов, используемых для работы со словарями
'''


# создадим словарь с именами и возрастом студентов
students_dict = {'maria': 20, 'peter': 20, 'sarah': 19, 'anton': 23, 'anna': 19}
print(students_dict)    # выведем элементы исходного словаря

# один из важных и популярных методов словарей - .items() - позволяет получить информацию о парах ключ-значение,
# содержащихся в словаре; в качестве аналогов могут использоваться методы .keys() для получения всех ключей словаря, а
# также .values() для получения всех значений словаря. Важно помнить, что вывод осуществляется в собственном формате,
# поэтому можно использовать приведение типов, чтобы преобразовать в формат списка
print('\n*** БЛОК 1. Метод .items() ***')
print(students_dict.items())    # выведем пары ключ-значение исходного словаря
print(students_dict.keys())    # выведем все ключи исходного словаря
print(students_dict.values())    # выведем все значения исходного словаря

# один из важных и популярных методов - определение длины словаря (количества пар ключ-значение) с помощью метода len()
print('\n*** БЛОК 2. Метод len() ***')

print(len(students_dict))    # выведем количество пар ключ-значение, содержащихся в словаре

# важный метод объединения словарей .update()
print('\n*** БЛОК 3. Метод .update() ***')

students_add = {'maria': 19, 'sergey': 19}    # создадим дополнительный словарь для объединения с исходным

print(students_dict)    # выведем элементы исходного словаря до объединения
print(len(students_dict))    # выведем количество пар ключ-значение, содержащихся в исходном словаре до объединения

# важно помнить, что неуникальные ключи - в нашем случае 'maria' -  будут перезаписаны
students_dict.update(students_add)    # добавим новый словарь к исходному

print(students_add)    # выведем элементы нового словаря
print(len(students_add))    # выведем количество пар ключ-значение, содержащихся в новом словаре

print(students_dict)    # выведем элементы исходного словаря после объединения
print(len(students_dict))    # выведем количество пар ключ-значение, содержащихся в исходном словаре после объединения

# важный метод получения значения по известному ключу .get()
print('\n*** БЛОК 4. Метод .get() ***')

print(students_dict)    # выведем элементы исходного словаря
print(students_dict.get('sarah'))    # выведем значение словаря для ключа 'sarah'

# важный метод удаления пары ключ-значение по известному ключу .pop()
# аналог .popitem() также удаляет пару ключ-значение, но не определенный, а последний в словаре, причем важно помнить,
# что пары ключ-значение в словаре не упорядочены
print('\n*** БЛОК 5. Метод .pop() ***')

print(students_dict)    # выведем элементы исходного словаря
print(len(students_dict))    # выведем количество пар ключ-значение, содержащихся в исходном словаре до удаления

# важно помнить, что при отсутствии ключа выпадет ошибка Key Error
students_dict.pop('anton')    # удалим пару ключ-значение для ключа 'anton'

print(students_dict)    # выведем элементы исходного словаря после удаления
print(len(students_dict))    # выведем количество пар ключ-значение, содержащихся в исходном словаре после удаления
